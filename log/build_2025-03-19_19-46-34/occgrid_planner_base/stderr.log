In file included from [01m[K/usr/include/c++/11/bits/stl_map.h:63[m[K,
                 from [01m[K/usr/include/c++/11/map:61[m[K,
                 from [01m[K/home/GTL/apaul/ros2_hw1/src/occgrid_planner_base/src/occgrid_planner.cpp:2[m[K:
/usr/include/c++/11/tuple: In instantiation of â€˜[01m[Kstd::pair<_T1, _T2>::pair(std::tuple<_Args1 ...>&, std::tuple<_Args2 ...>&, std::_Index_tuple<_Indexes1 ...>, std::_Index_tuple<_Indexes2 ...>) [with _Args1 = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&}; long unsigned int ..._Indexes1 = {0}; _Args2 = {}; long unsigned int ..._Indexes2 = {}; _T1 = const std::__cxx11::basic_string<char>; _T2 = OccupancyGridPlanner::Node3D][m[Kâ€™:
[01m[K/usr/include/c++/11/tuple:1809:63:[m[K   required from â€˜[01m[Kstd::pair<_T1, _T2>::pair(std::piecewise_construct_t, std::tuple<_Args1 ...>, std::tuple<_Args2 ...>) [with _Args1 = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&}; _Args2 = {}; _T1 = const std::__cxx11::basic_string<char>; _T2 = OccupancyGridPlanner::Node3D][m[Kâ€™
[01m[K/usr/include/c++/11/ext/new_allocator.h:162:4:[m[K   required from â€˜[01m[Kvoid __gnu_cxx::new_allocator<_Tp>::construct(_Up*, _Args&& ...) [with _Up = std::pair<const std::__cxx11::basic_string<char>, OccupancyGridPlanner::Node3D>; _Args = {const std::piecewise_construct_t&, std::tuple<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>, std::tuple<>}; _Tp = std::__detail::_Hash_node<std::pair<const std::__cxx11::basic_string<char>, OccupancyGridPlanner::Node3D>, true>][m[Kâ€™
[01m[K/usr/include/c++/11/bits/alloc_traits.h:516:17:[m[K   required from â€˜[01m[Kstatic void std::allocator_traits<std::allocator<_CharT> >::construct(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, _Up*, _Args&& ...) [with _Up = std::pair<const std::__cxx11::basic_string<char>, OccupancyGridPlanner::Node3D>; _Args = {const std::piecewise_construct_t&, std::tuple<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>, std::tuple<>}; _Tp = std::__detail::_Hash_node<std::pair<const std::__cxx11::basic_string<char>, OccupancyGridPlanner::Node3D>, true>; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<std::__detail::_Hash_node<std::pair<const std::__cxx11::basic_string<char>, OccupancyGridPlanner::Node3D>, true> >][m[Kâ€™
[01m[K/usr/include/c++/11/bits/hashtable_policy.h:1878:36:[m[K   required from â€˜[01m[Kstd::__detail::_Hashtable_alloc<_NodeAlloc>::__node_type* std::__detail::_Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&& ...) [with _Args = {const std::piecewise_construct_t&, std::tuple<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>, std::tuple<>}; _NodeAlloc = std::allocator<std::__detail::_Hash_node<std::pair<const std::__cxx11::basic_string<char>, OccupancyGridPlanner::Node3D>, true> >; std::__detail::_Hashtable_alloc<_NodeAlloc>::__node_ptr = std::allocator<std::__detail::_Hash_node<std::pair<const std::__cxx11::basic_string<char>, OccupancyGridPlanner::Node3D>, true> >::value_type*][m[Kâ€™
[01m[K/usr/include/c++/11/bits/hashtable.h:304:35:[m[K   required from â€˜[01m[Kstd::_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::_Scoped_node::_Scoped_node(std::_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::__hashtable_alloc*, _Args&& ...) [with _Args = {const std::piecewise_construct_t&, std::tuple<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>, std::tuple<>}; _Key = std::__cxx11::basic_string<char>; _Value = std::pair<const std::__cxx11::basic_string<char>, OccupancyGridPlanner::Node3D>; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, OccupancyGridPlanner::Node3D> >; _ExtractKey = std::__detail::_Select1st; _Equal = std::equal_to<std::__cxx11::basic_string<char> >; _Hash = std::hash<std::__cxx11::basic_string<char> >; _RangeHash = std::__detail::_Mod_range_hashing; _Unused = std::__detail::_Default_ranged_hash; _RehashPolicy = std::__detail::_Prime_rehash_policy; _Traits = std::__detail::_Hashtable_traits<true, false, true>; std::_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::__hashtable_alloc = std::_Hashtable<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, OccupancyGridPlanner::Node3D>, std::allocator<std::pair<const std::__cxx11::basic_string<char>, OccupancyGridPlanner::Node3D> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char> >, std::hash<std::__cxx11::basic_string<char> >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::__hashtable_alloc][m[Kâ€™
[01m[K/usr/include/c++/11/bits/hashtable_policy.h:707:42:[m[K   required from â€˜[01m[Kstd::__detail::_Map_base<_Key, _Pair, _Alloc, std::__detail::_Select1st, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, true>::mapped_type& std::__detail::_Map_base<_Key, _Pair, _Alloc, std::__detail::_Select1st, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, true>::operator[](const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Pair = std::pair<const std::__cxx11::basic_string<char>, OccupancyGridPlanner::Node3D>; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, OccupancyGridPlanner::Node3D> >; _Equal = std::equal_to<std::__cxx11::basic_string<char> >; _Hash = std::hash<std::__cxx11::basic_string<char> >; _RangeHash = std::__detail::_Mod_range_hashing; _Unused = std::__detail::_Default_ranged_hash; _RehashPolicy = std::__detail::_Prime_rehash_policy; _Traits = std::__detail::_Hashtable_traits<true, false, true>; std::__detail::_Map_base<_Key, _Pair, _Alloc, std::__detail::_Select1st, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, true>::mapped_type = OccupancyGridPlanner::Node3D; std::__detail::_Map_base<_Key, _Pair, _Alloc, std::__detail::_Select1st, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, true>::key_type = std::__cxx11::basic_string<char>][m[Kâ€™
[01m[K/usr/include/c++/11/bits/unordered_map.h:980:20:[m[K   required from â€˜[01m[Kstd::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::mapped_type& std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::operator[](const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = OccupancyGridPlanner::Node3D; _Hash = std::hash<std::__cxx11::basic_string<char> >; _Pred = std::equal_to<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, OccupancyGridPlanner::Node3D> >; std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::mapped_type = OccupancyGridPlanner::Node3D; std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::key_type = std::__cxx11::basic_string<char>][m[Kâ€™
[01m[K/home/GTL/apaul/ros2_hw1/src/occgrid_planner_base/src/occgrid_planner.cpp:368:47:[m[K   required from here
[01m[K/usr/include/c++/11/tuple:1820:9:[m[K [01;31m[Kerror: [m[Kno matching function for call to â€˜[01m[KOccupancyGridPlanner::Node3D::Node3D()[m[Kâ€™
 1820 |         [01;31m[Ksecond(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)[m[K
      |         [01;31m[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[01m[K/home/GTL/apaul/ros2_hw1/src/occgrid_planner_base/src/occgrid_planner.cpp:62:13:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[KOccupancyGridPlanner::Node3D::Node3D(int, int, int)[m[Kâ€™
   62 |             [01;36m[KNode3D[m[K(int _x, int _y, int _theta) : x(_x), y(_y), theta(_theta) {}
      |             [01;36m[K^~~~~~[m[K
[01m[K/home/GTL/apaul/ros2_hw1/src/occgrid_planner_base/src/occgrid_planner.cpp:62:13:[m[K [01;36m[Knote: [m[K  candidate expects 3 arguments, 0 provided
[01m[K/home/GTL/apaul/ros2_hw1/src/occgrid_planner_base/src/occgrid_planner.cpp:59:16:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kconstexpr OccupancyGridPlanner::Node3D::Node3D(const OccupancyGridPlanner::Node3D&)[m[Kâ€™
   59 |         struct [01;36m[KNode3D[m[K {
      |                [01;36m[K^~~~~~[m[K
[01m[K/home/GTL/apaul/ros2_hw1/src/occgrid_planner_base/src/occgrid_planner.cpp:59:16:[m[K [01;36m[Knote: [m[K  candidate expects 1 argument, 0 provided
[01m[K/home/GTL/apaul/ros2_hw1/src/occgrid_planner_base/src/occgrid_planner.cpp:59:16:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kconstexpr OccupancyGridPlanner::Node3D::Node3D(OccupancyGridPlanner::Node3D&&)[m[Kâ€™
[01m[K/home/GTL/apaul/ros2_hw1/src/occgrid_planner_base/src/occgrid_planner.cpp:59:16:[m[K [01;36m[Knote: [m[K  candidate expects 1 argument, 0 provided
gmake[2]: *** [CMakeFiles/occgrid_planner_base.dir/build.make:76: CMakeFiles/occgrid_planner_base.dir/src/occgrid_planner.cpp.o] Error 1
gmake[1]: *** [CMakeFiles/Makefile2:141: CMakeFiles/occgrid_planner_base.dir/all] Error 2
gmake: *** [Makefile:146: all] Error 2
